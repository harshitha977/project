
import java.io.BufferedReader;
import java.io.FileReader;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Statement;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;

public class CrudOperations1{
    private static final String DB_URL = "jdbc:mysql://localhost:3306/harshitha";
    private static final String USER = "root";
    private static final String PASSWORD = "harshi@977";

    private static final Map<Integer, String> tableNames = new HashMap<>();
    private static final Map<Integer, String> operationNames = new HashMap<>();
    private static final Map<String, String> sqlFilePaths = new HashMap<>();

    static {
        tableNames.put(1, "Customers");
        tableNames.put(2, "Orders");
        tableNames.put(3, "Products");
        tableNames.put(4, "Employees");

        operationNames.put(1, "Created");
        operationNames.put(2, "Inserted values into");
        operationNames.put(3, "Updated records in");
        operationNames.put(4, "Deleted records from");

        sqlFilePaths.put("1-1", "D:\\java crt\\crcustomers.txt");
        sqlFilePaths.put("1-2", "D:\\java crt\\incustomers.txt");
        sqlFilePaths.put("1-3", "D:\\java crt\\ucustomers.txt");
        sqlFilePaths.put("1-4", "D:\\java crt\\dcustomers.txt");
        sqlFilePaths.put("1-5", "D:\\java crt\\scustomers.txt");
        sqlFilePaths.put("2-1", "D:\\java crt\\crorders.txt");
        sqlFilePaths.put("2-2", "D:\\java crt\\inorders.txt");
        sqlFilePaths.put("2-3", "D:\\java crt\\uporders.txt");
        sqlFilePaths.put("2-4", "D:\\java crt\\dorders.txt");
        sqlFilePaths.put("2-5", "D:\\java crt\\sorders.txt");
        sqlFilePaths.put("3-1", "D:\\java crt\\cproducts.txt");
        sqlFilePaths.put("3-2", "D:\\java crt\\inproducts.txt");
        sqlFilePaths.put("3-3", "D:\\java crt\\upproducts.txt");
        sqlFilePaths.put("3-4", "D:\\java crt\\dproducts.txt");
        sqlFilePaths.put("3-5", "D:\\java crt\\sproducts.txt");
        sqlFilePaths.put("4-1", "D:\\java crt\\cemployee.txt");
        sqlFilePaths.put("4-2", "D:\\java crt\\iemployee.txt");
        sqlFilePaths.put("4-3", "D:\\java crt\\upemployee.txt");
        sqlFilePaths.put("4-4", "D:\\java crt\\demployee.txt");
        sqlFilePaths.put("4-5", "D:\\java crt\\semployee.txt");
    }
	    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        while (true) {
            System.out.println("\nSelect Table:");
            System.out.println("1. Customers");
            System.out.println("2. Orders");
            System.out.println("3. Products");
            System.out.println("4. Employees");
            System.out.println("5. Exit");
            System.out.print("Enter choice: ");
            int tableChoice = scanner.nextInt();

            if (tableChoice == 5) {
                System.out.println("Exiting...");
                break;
            }

            while (true) {
                System.out.println("\nSelect Operation for Table " + tableChoice + ":");
                System.out.println("1. Create Table");
                System.out.println("2. Insert Values");
                System.out.println("3. Update Records");
                System.out.println("4. Delete Records");
                System.out.println("5. Back");
                System.out.print("Enter choice: ");
                int operationChoice = scanner.nextInt();

                if (operationChoice == 5) {
                    break;
                }

                String key = tableChoice + "-" + operationChoice;
                String filePath = sqlFilePaths.get(key);

                if (filePath == null) {
                    System.out.println("No SQL file mapped for this choice.");
                    continue;
                }

                System.out.println("Running SQL file: ");
                try {
                    executeSQLFile(filePath);
                    System.out.println(operationNames.get(operationChoice) + " " + tableNames.get(tableChoice) + " successfully.");
                } catch (Exception e) {
                    System.out.println("Error executing file: " + e.getMessage());
                    e.printStackTrace();
                }
            }
        }

        scanner.close();
    }

    public static void executeSQLFile(String filePath) throws Exception {
        StringBuilder sql = new StringBuilder();
        try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {
            String line;
            while ((line = br.readLine()) != null) {
                sql.append(line).append("\n");
            }
        }

        try (Connection conn = DriverManager.getConnection(DB_URL, USER, PASSWORD);
             Statement stmt = conn.createStatement()) {
				 conn.setAutoCommit(true);


            String[] queries = sql.toString().split(";");
            for (String query : queries) {
                query = query.trim();
                if (!query.isEmpty()) {
                    stmt.execute(query);
                }
            }
        }
		
    }
	public static String getTableData(String tableName) {
    StringBuilder result = new StringBuilder();
    try {
        System.out.println("Connecting to DB with root...");

        Connection conn = DriverManager.getConnection(
            "jdbc:mysql://localhost:3306/new1?useSSL=false",  
            "root",
            "Positive$8985"
        );

        Statement stmt = conn.createStatement();
        ResultSet rs = stmt.executeQuery("SELECT * FROM " + tableName);
        ResultSetMetaData meta = rs.getMetaData();
        int colCount = meta.getColumnCount();

        while (rs.next()) {
            for (int i = 1; i <= colCount; i++) {
                result.append(meta.getColumnName(i)).append(": ").append(rs.getString(i)).append(" | ");
            }
            result.append("\n");
        }

        conn.close();  // Always close your connection
    } catch (Exception e) {
        e.printStackTrace();  // Shows the full error in the terminal
        return "Error fetching data: " + e.getMessage();
    }
    return result.toString();
}
}

